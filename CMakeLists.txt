cmake_minimum_required(VERSION 3.0.0)
list(APPEND CMAKE_MESSAGE_CONTEXT ulqr)
project(ulqr VERSION 0.1.0 LANGUAGES C)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Include useful modules
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(CMakePrintHelpers)
include(GNUInstallDirs)
include(Functions)

# Set RPATH
#   This ensures any shared libraries generated by the project
#   can be found when installed
#   See 26.2.2 of Professional CMake
file(RELATIVE_PATH relDir
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}
  ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}
)
set(CMAKE_INSTALL_RPATH $ORIGIN $ORIGIN/${relDir})

# Add compile options
add_compile_options(-Wall -Wextra -pedantic -Werror -Wno-error=unknown-pragmas)
add_compile_options(-mavx2 -mfma)

##############################
# Options
##############################

# Handle default build type
set(ULQR_DEFAULT_BUILD_TYPE "Release")
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "No build type specified. Setting CMAKE_BUILD_TYPE to ${ULQR_DEFAULT_BUILD_TYPE}")
  set(CMAKE_BUILD_TYPE ${ULQR_DEFAULT_BUILD_TYPE} CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Enable testing
option(ULQR_BUILD_TESTS "Build tests for ulqr" ON)

# Code Coverage
option(ULQR_CODE_COVERAGE "Compile rsLQR with Code Coverage." OFF)
if(ULQR_CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  message(STATUS "Compiling ulqr with coverage info.")
  add_compile_options(-O0 -g -fprofile-arcs -ftest-coverage)
  add_link_options(-fprofile-arcs -ftest-coverage)
endif()

# Documentation
option(ULQR_BUILD_DOCS "Build documentation for ulqr." OFF)

# Code Coverage
option(ULQR_CODE_COVERAGE "Compile ulqr with code coverage information." OFF)

# Enable clang-tidy analysis 
option(ULQR_CLANG_TIDY "Run clang-tidy analyzer on the source code." OFF) 

##############################
# Dependencies
##############################
if (ULQR_BUILD_DOCS)
  find_package(Doxygen REQUIRED)
endif()

##############################
# Code Coverage 
##############################
if(ULQR_CODE_COVERAGE AND CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
  message(STATUS "Compiling ulqr with coverage info.")
  add_compile_options(-O0 -g -fprofile-arcs -ftest-coverage)
  add_link_options(-fprofile-arcs -ftest-coverage)
endif()

##############################
# Build
##############################

# Compile options
add_compile_options(-Wall -Wextra -pedantic -Werror)

# Make all includes relative to src/ directory
include_directories(${PROJECT_SOURCE_DIR}/src)

# Build source files
add_subdirectory(src)

##############################
# Testing 
##############################
if (ULQR_BUILD_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()

##############################
# Documentation 
##############################
if (ULQR_BUILD_DOCS)
  add_subdirectory(docs)
endif()

##############################
# Packaging / Installation 
##############################
add_subdirectory(packaging)
